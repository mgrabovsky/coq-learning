This repository was originally intended as a log of my learning of the
[Coq](https://coq.inria.fr/) proof assistant. My interests have since grown
enormously in breadth and so the document has surpassed its original scope. At this
moment, I'd like this place to collect and categorise interesting and useful
resources on the theory and applications of various methods of formal verification.
This includes topics such as theorem proving, higher-order logic, lambda calculus,
type theory, model checking, automated reasoning and so on.

During my adventures in the software verification land, I too often grieved that
there was no single book or website that would concisely and eloquently describe some
of the methods of the field, the software packages it employed, the jargon or
connections to other fields of research. To the best of my knowledge, there is still
no such book, survey article, podcast or any other resource. My vision is to fill
this gap and provide a sort of signpost or handbook for readers who are new to this
area and are eager to learn all of it.

I do not yet claim completeness, correctness, consistency or usefulness of any
of information contained herein.

![](http://i.creativecommons.org/p/zero/1.0/80x15.png)

---

-   [Useful resources on Coq](#useful-resources-on-coq)
    -   [Coq-related blogs](#coq-related-blogs)
-   [Libraries and plug-ins for Coq](#libraries-and-plug-ins-for-coq)
-   [Applications of Coq](#applications-of-coq)
    -   [Papers and articles using Coq](#papers-and-articles-using-coq)
-   [Related languages, tools and stuff](#related-languages-tools-and-stuff)
    -   [Journals and book series](#journals-and-book-series)
    -   [Conferences and workshops](#conferences-and-workshops)
    -   [Proof assistants, provers and languages](#proof-assistants-provers-and-languages)
    -   [Model checkers](#model-checkers)
    -   [SAT &amp; SMT solvers](#sat--smt-solvers)
    -   [Other tools](#other-tools)
    -   [Formal methods in practice](#formal-methods-in-practice)
    -   [Learning resources](#learning-resources)
-   [Type theory](#type-theory)
-   [Copyright](#copyright)

## Useful resources on Coq

-   [Official Coq documentation](https://coq.inria.fr/documentation)
    -   The official documentation is OK, quite comprehensive. The description of
        tactics is very good, there are few undocumented points.
    -   [Reference Manual](https://coq.inria.fr/distrib/current/files/Reference-Manual.pdf)
    -   [Tutorial](https://coq.inria.fr/distrib/current/files/Tutorial.pdf)
        -   A simple and straightforward introduction to basics of proofs using Coq
-   [Official wiki](https://github.com/coq/coq/wiki) on GitHub
-   The [coq-club](https://sympa.inria.fr/sympa/arc/coq-club) mailing list
-   B\. C. Pierce et al.: [_Software Foundations_](http://www.cis.upenn.edu/~bcpierce/sf/current/)
    – probably the best introduction into Coq and theorem proving available
-   A\. Chlipala: [_Certified Programming with Dependent Types_](http://adam.chlipala.net/cpdt/)
    – an awesome book to read after _Software Foundations_; a bit more advanced,
    slightly different topics; puts forth the idea of using automation whenever
    possible
-   I\. Sergey: [_Programs and Proofs: Mechanizing Mathematics with Dependent Types_](http://ilyasergey.net/pnp/) (draft)
-   [/r/coq](https://www.reddit.com/r/coq)
-   [Coq in a Hurry](https://cel.archives-ouvertes.fr/file/index/docid/475807/filename/coq-hurry.pdf)
-   [Introduction to the Coq proof-assistant for practical software
    verification](https://www.lri.fr/~paulin/LASER/course-notes.pdf) course notes
    -   Another tutorial, slightly more interesting; possibly outdated
-   [Coq'Art](http://www.labri.fr/perso/casteran/CoqArt/index.html) – the first ever
    book on Coq and CoC
    -   See also [Pierre Castéran's page](http://www.labri.fr/perso/casteran/) for
        _A Tutorial on [Co-]Inductive Types in Coq_ and _A Gentle Introduction to
        Type Classes and Relations in Coq_
-   the [nLab wiki](http://ncatlab.org/nlab/show/HomePage)
    -   [its page on Coq](http://ncatlab.org/nlab/show/Coq), for instance

### Coq-related blogs

-   [Poleiro](http://poleiro.info/)
-   [Gagallium](http://gallium.inria.fr/blog/) – blog of the [Gallium research team](http://gallium.inria.fr/) at Inria
-   Guillaume Claret's [Coq blog](http://coq-blog.clarus.me/)
-   [Coq en Stock](http://goto.ucsd.edu/~vrobert/coq-en-stock/blog/)
-   [_Homotopy Type Theory_ blog](http://homotopytypetheory.org/blog)
    -   [Modules for Modalities](http://homotopytypetheory.org/2015/07/05/modules-for-modalities)
        – an article on Coq's module system and universe polymorphism
-   [The Type Theory Podcast](http://typetheorypodcast.com/)

## Libraries and plug-ins for Coq

-   [Ssreflect and MathComp](http://ssr.msr-inria.inria.fr/)
    -   ["A Small Scale Reflection Extension for the Coq system"](https://hal.inria.fr/inria-00258384/en)
    -   ["Computing with Univalence"](http://dlicata.web.wesleyan.edu/pubs/lh122tttalks/lh12hdact-slides.pdf)
        (2008; slides)
-   [CoLoR](http://color.inria.fr/) – "a Coq Library on rewriting and termination"
-   [GeoCoq](https://geocoq.github.io/GeoCoq/) – formalization of geometry based on
    Tarski's axiom system
-   [coq-ext-lib](https://github.com/coq-ext-lib/coq-ext-lib) – "a collection of
    theories and plugins that may be useful in other Coq developments"
-   [Equations](http://www.pps.univ-paris-diderot.fr/~sozeau/research/coq/equations.en.html)
    – dependent pattern matching
-   [coqrel](https://github.com/CertiKOS/coqrel) – binary logical relations library
-   [Mtac](http://plv.mpi-sws.org/mtac/) – "a monad for typed tactic programming in Coq"
-   [cases plug-in](https://github.com/pilki/cases) – extended support for `S*Case`
    as featured in _Software Foundations_
-   [coq-dpdgraph](https://github.com/karmaki/coq-dpdgraph) – plug-in for exploring
    dependencies between Coq objects
-   [wilcoxjay/tactics](https://github.com/wilcoxjay/tactics) – some useful tactics
    by James Wilcox
-   ["A Formal Library for Elliptic Curves in the Coq Proof Assistant"](https://dx.doi.org/10.1007/978-3-319-08970-6_6)
    ([GitHub](https://github.com/strub/elliptic-curves-ssr))
-   [multinomials](https://github.com/strub/multinomials-ssr) – a Coq/SSReflect
    library for multinomials
-   [finset](https://github.com/aspiwack/finset) – finite sets of countable types in Coq
-   [Coquelicot](http://coquelicot.saclay.inria.fr/) – library for real analysis
    -   C\. Lelay (2015): ["How to express convergence for analysis in Coq"](https://hal.inria.fr/hal-01169321)
-   [domain theory in Coq](http://rwd.rdockins.name/domains/)
-   [Coq.io](http://coq.io/) and others by [Guillaume Claret](http://claret.me/)
    ([GitHub](https://github.com/clarus))
-   [Cybele](http://cybele.gforge.inria.fr/) – "a powerful tool to write proofs by
    reflection in Coq"
-   [Verdi](https://github.com/uwplse/verdi) – "a framework for formally verifying
    distributed systems implementations in Coq"
-   [coq-haskell](https://github.com/jwiegley/coq-haskell)
    -   Applied: [coq-pipes](https://github.com/jwiegley/coq-pipes)
-   [CFML](http://www.chargueraud.org/softs/cfml/): Characteristic Formulae for ML
    – verification of correctness and amortized complexity of OCaml programs
    -   [A series of blog posts](http://gallium.inria.fr/~scherer/gagallium/formally-verified-complexity-with-cfml-part-1/)
        on the Gagallium blog on verifying complexity
-   [TLC](http://www.chargueraud.org/softs/tlc/): "a non-constructive library for Coq"
    – extensionality as an axiom, classical logic by default, etc.
-   [Verified Software Toolchain](http://vst.cs.princeton.edu/) (VST)
    -   tons of articles around this
    -   A\. W. Appel: ["Verified Software Toolchain"](https://www.cs.princeton.edu/~appel/papers/vst.pdf) (2011)
    -   A\. W. Appel: ["Verification of a Cryptographic Primitive: SHA-256"](http://www.cs.princeton.edu/~appel/papers/verif-sha-2.pdf) (2016)
-   [Bedrock](http://plv.csail.mit.edu/bedrock/) (abandoned)
    -   A\. Chlipala: ["The Bedrock Structured Programming System: Combining
        Generative Metaprogramming and Hoare Logic in an Extensible Program
        Verifier"](http://adam.chlipala.net/papers/BedrockICFP13/BedrockICFP13.pdf)
-   [Ynot](http://ynot.cs.harvard.edu/) (abandoned)
    -   A\. Chlipala et al.: ["Effective Interactive Proofs for Higher-Order
        Imperative Programs"](http://ynot.cs.harvard.edu/papers/icfp09.pdf)
-   ["Category Theory in Coq 8.5"](http://arxiv.org/abs/1505.06430) ([Bitbucket](https://bitbucket.org/amintimany/categories/); Coq Workshop 2014)
-   [CH2O](http://robbertkrebbers.nl/research/ch2o/) – formalization of ISO C11
    by [Rober Krebbers](http://robbertkrebbers.nl/thesis.html)
    ([GitHub](https://github.com/robbertkrebbers/ch2o))
    -   ["Formalizing C in Coq"](https://coqpl.cs.washington.edu/wp-content/uploads/2014/12/ch2o.pdf)
        ([CoqPL 2015](https://coqpl.cs.washington.edu/))

## Applications of Coq

-   [CertiCrypt](http://certicrypt.gforge.inria.fr/) – Computer-Aided Cryptographic Proofs in Coq
    -   ["Formal certification of ElGamal encryption"](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.220.6617) (2008)
-   [CompCert](http://compcert.inria.fr/) – verified optimising compiler of
    a substantial subset of C99
    -   X\. Leroy _et al._: ["CompCert – A Formally Verified Optimizing Compiler"](https://hal.inria.fr/LORIA-FM/hal-01238879) (2016)
-   [Verasco](http://compcert.inria.fr/verasco/) – verified static analyser
-   [DopCert](http://dopcert.cs.washington.edu/) – framework for formally verifying database query optimizations; uses HoTT
    -   S\. Chu, K. Weitz, A. Cheung, D. Suciu: ["HoTTSQL: Proving Query Rewrites with Univalent SQL Semantics"](https://arxiv.org/abs/1607.04822) (2016)
-   [JSCert: Certified JavaScript](http://jscert.org)
    -   ["A Trusted Mechanised JavaScript Specification"](http://www.doc.ic.ac.uk/~gds/jscert_popl14.pdf)
        (2014; [slides](http://jscert.org/popol14))
-   [Cosa](https://github.com/aspiwack/cosa) – Coq-verified Shape Analysis
-   ["A Machine-Checked Proof of the Odd Order Theorem"](http://www.cs.unibo.it/~asperti/PAPERS/odd_order.pdf)
-   ["A Reflexive Formalization of a SAT Solver in Coq"](https://www.lri.fr/~conchon/publis/lescuyer-conchon-tphols08.pdf)
    (2008)
-   ["Towards an effective formally certified constraint solver"](http://cp2014.a4cp.org/sites/default/files/uploads/DuboisGotlieb-slides.pdf)
    (2014; slides)

### Papers and articles using Coq

-   [Heq: a Coq library for Heterogeneous Equality](http://sf.snu.ac.kr/gil.hur/Heq/)
-   ["Inductive-inductive definitions"](http://personal.cis.strath.ac.uk/fredrik.nordvall-forsberg/thesis/thesis.pdf)
-   ["Gradual Certified programming in Coq"](http://arxiv.org/abs/1506.04205)
-   ["An intro to (co)algebra and (co)induction"](http://homepages.cwi.nl/~janr/papers/files-of-papers/2011_Jacobs_Rutten_new.pdf)
-   ["Canonical Structures for the Working Coq User"](https://www.reddit.com/r/Coq/comments/3erkgv/canonical_structures_for_the_working_coq_user/)
-   ["Foundational Property-Based Testing"](https://hal.inria.fr/hal-01162898)
    – _QuickChick_, a port of _QuickCheck_ to Coq
-   J\. Gross: ["Coq Bug Minimizer"](https://coqpl.cs.washington.edu/wp-content/uploads/2014/12/bug-minimizer.pdf)
    (CoqPL 2015; [GitHub](https://github.com/JasonGross/coq-tools))
-   C\. Doczkal, J.-O. Kaiser, G. Smolka: ["A Constructive Theory of Regular Languages in Coq"](https://www.mpi-sws.org/~janno/publications/DBLP:conf/cpp/DoczkalKS13.pdf)
-   F\. Chyzak, A. Mahboubi, T. Sibut-Pinote, E. Tassi: ["A Computer-Algebra-Based Formal Proof of the Irrationality of ζ(3)"](https://hal.inria.fr/hal-00984057)
-   HAL Loria Archive, (Department 2: Formal Methods](https://hal.inria.fr/LORIA-FM/index/index)

## Related languages, tools and stuff

For tools, see also [page on the Coq website](https://coq.inria.fr/related-tools).

-   [DeepSpec: The Science of Deep Specification](http://www.deepspec.org/) – an NSF-funded initiative aiming to unify existing tools at the specification level and develop new ways to write "good" specifications
-   [_Homotopy Type Theory_](http://homotopytypetheory.org/) – the book and [the library](https://github.com/HoTT/HoTT)
    -   [Coq for Homotopy Type Theory](http://tabareau.fr/coqhott) – a dedicated research project
-   [UniMath](https://github.com/UniMath/UniMath) (Univalent Foundations)

Related ACM Special Interest Groups: [SIGPLAN](http://www.sigplan.org/),
[SIGLOG](http://siglog.org/) and [SIGACT](http://www.sigact.org/).

### Journals and book series

(† denotes open-access journals)

-   [_Logical Methods in Computer Science_](http://lmcs-online.org/index.php)&thinsp;†
-   [_Electronic Proceedings in Theoretical Computer Science_](http://eptcs.web.cse.unsw.edu.au/) (EPTCS)&thinsp;†
-   [_LIPIcs: Leibniz International Proceedings in Informatics_](http://www.dagstuhl.de/en/publications/lipics/)&thinsp;†
-   _International Journal of Foundations of Computer Science_
-   [_Information and Computation_](http://www.journals.elsevier.com/information-and-computation)
-   [_Journal of Automated Reasoning_](https://www.springer.com/computer/theoretical+computer+science/journal/10817)
-   [_Studies in Logic, Grammar and Rhetoric_](http://logika.uwb.edu.pl/studies/index.php)&nbsp;†
-   Springer's [_Lecture Notes in Computer Science_](http://link.springer.com/bookseries/558) series

**Meta**

-   [ACM Journals/Transactions](https://dl.acm.org/pubs.cfm)
-   [Elsevier journals](https://www.elsevier.com/journals/subjects/computer-science/title/all) on computer science
-   [Springer journals](http://link.springer.com/search?facet-discipline=%22Computer+Science%22&facet-content-type=%22Journal%22) on CS
-   [Cambridge Journals](http://journals.cambridge.org/action/bySubjectArea#subject8) on CS

### Conferences and workshops

_See the [standalone file](conferences.mkd)._

### Proof assistants, provers and languages

-   [Lean](https://leanprover.github.io/) – a new theorem prover developed by Microsoft and CMU with
    automation support; based on CIC, supports HoTT as well
-   [Matita](http://matita.cs.unibo.it/) – based on (a variant of) CoC
-   [Agda](http://wiki.portal.chalmers.se/agda/pmwiki.php) – a (relatively) new, hip dependently-typed
    functional language and interactive theorem prover
    -   [Agda Tutorial](http://people.inf.elte.hu/divip/AgdaTutorial/Index.html)
-   [Idris](http://www.idris-lang.org/) – another new and hip "general purpose" language with dependent
    types, support for theorem proving and tactics; kind of like Coq-flavoured Haskell
-   [Dedukti](http://dedukti.gforge.inria.fr/) – proof checker based on the
    λΠ-calculus; tools for translation from other proof assistants available
-   [the PRL Project](http://www.nuprl.org/) a.k.a. Nuprl
    -   [MetaPRL](http://metaprl.org/default.html)
    -   [JonPRL](http://www.jonprl.org) ([GitHub](https://github.com/jonsterling/jonprl))
        – a reimplementation of Nuprl by Jon Sterling, Danny Gratzer and Vincent Rahli
    -   [Red JonPRL](https://github.com/JonPRL/sml-red-jonprl) – yet another
        reincarnation by Jon Sterling
-   [MetaPRL](http://metaprl.org/default.html)
-   [miniprl](https://github.com/jozefg/miniprl) – a minimal implementation of PRL in Standard ML
    -   [cha](https://github.com/thsutton/cha) – an implementation in Haskell
-   [Isabelle](https://isabelle.in.tum.de/) – great [Archive of Formal Proofs](http://afp.sourceforge.net/);
    small trusted meta-logical core, usually used along with HOL
    -   [Haskabelle](https://isabelle.in.tum.de/haskabelle.html)
    -   [Isar](https://isabelle.in.tum.de/Isar/)
    -   Isabelle/HOLCF – [paper](https://www21.in.tum.de/~nipkow/pubs/jfp99.html),
        [tutorial](https://isabelle.in.tum.de/library/HOL/HOLCF-Tutorial/document.pdf)
    -   [Archive of Formal Proofs](https://www.isa-afp.org) – an extensive collection
        of proof libraries for Isabelle
-   [HOL](https://hol-theorem-prover.org/) by Michael Gordon et al. – the
    original system for interactive theorem proving in higher-order logic
    -   [HOL Light](https://www.cl.cam.ac.uk/~jrh13/hol-light/) – small trusted core
    -   [HOL4](http://hol.sourceforge.net/)
-   [MINLOG](http://www.mathematik.uni-muenchen.de/~logik/minlog) – interactive proof
    assistant based on first-order natural deduction calculus
-   [ProofPower](http://www.lemma-one.com/ProofPower/index/) – based on higher-order
    logic
-   [Mizar](http://mizar.org/)
-   [ACL2](https://www.cs.utexas.edu/users/moore/acl2/) (_A Computational Logic for
    Applicative Common Lisp_) – logic for modelling systems and a complementary
    prover; based on first-order logic
-   [Milawa](https://www.cs.utexas.edu/users/jared/milawa/Web/) – theorem prover for
    ACL2-like logic
    -   [_The reflective Milawa theorem prover is sound_](https://www.cs.utexas.edu/users/jared/publications/2015-jar-milawa.pdf) (2015)
-   [ATS](http://www.ats-lang.org/) (_Applied Type System_) – dependently typed
    functional languge
-   [E](http://wwwlehre.dhbw-stuttgart.de/~sschulz/E/E.html) theorem prover for first-order logic
-   [LEGO](http://www.dcs.ed.ac.uk/home/lego/) proof assistant
-   [F7](http://research.microsoft.com/en-us/projects/f7/) – extension of F#'s type
    system with refinement types, dependent types and π-calculus-style concurrency
-   [F\*](https://www.fstar-lang.org/) – "a new higher order, effectful programming
    language designed with program verification in mind"
-   [Eff](http://www.eff-lang.org/) – functional language with first-class effects
    and native handling of all kinds of computational effects without touching monads
-   [Twelf](http://twelf.org/wiki/Main_Page)
-   [Celf](https://clf.github.io/celf/)
-   [Abella](http://abella-prover.org/)
-   [Beluga](http://complogic.cs.mcgill.ca/beluga/)
-   Delphin
    -   C\. Schürmann, R. Fontana, Y. Liao: ["Delphin: Functional Programming with Deductive Systems"](http://www.itu.dk/people/carsten/papers/delphin.pdf)
-   [Andromeda](https://andromedans.github.io/andromeda/) – type theory with equality reflection
    -   Andrej Bauer's [Leeds workshop slides](http://math.andrej.com/2016/07/28/the-andromeda-proof-assistant-leeds-workshop-slides/) and some interesting discussion in the comments below
-   [Prover9 and Mace4](https://www.cs.unm.edu/~mccune/prover9/) – and automated
    theorem prover for FOL and searcher for counterexamples, respectively
-   [leanCOP](http://www.leancop.de/) – tiny automated theorem prover for classical
    first-order logic implemented in Prolog
-   [PVS](http://pvs.csl.sri.com/)
-   [Guru](https://code.google.com/archive/p/guru-lang/)
    -   A\. Stump, et al.: ["Verified Programming in
        Guru"](http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=8D1BE79D192DB10400D2E668D7B4729C?doi=10.1.1.588.9316&rep=rep1&type=pdf)

<dl>
<dt>Coq</dt>
<dd>Coq is an interactive theorem prover and proof assistant based on an intensional
intuitionistic type theory -- the Calculus of Inductive Constructions (CIC). It is
a dependently-typed λ-calculus and (by the Curry-Howard isomorphism) an
intuitionistic higher-order logic. It is written in OCaml.</dd>
</dl>

### Model checkers

-   [SPIN](http://spinroot.com/spin/whatispin.html)
-   [DIVINE](https://divine.fi.muni.cz/index.html) – parallel, distributed-memory explicit-state LTL checker
-   [UPPAAL](http://www.uppaal.org/)
-   [TLA+](http://research.microsoft.com/en-us/um/people/lamport/tla/tla.html)
-   [NuSMV](http://nusmv.fbk.eu/) – symbolic model checker
-   [Ultimate Automizer](https://monteverdi.informatik.uni-freiburg.de/tomcat/Website/?ui=tool&tool=automizer)
    – model checker based on an automata approach
-   [LTSmin](http://fmt.cs.utwente.nl/tools/ltsmin/) – language-agnostic
-   [PRISM](http://www.prismmodelchecker.org/) – probabilistic model checker
-   [MMC](https://www3.cs.stonybrook.edu/~lmc/mmc/) – explicit-state model checker for π-calculus
-   [CBMC](http://www.cprover.org/cbmc/) – bounded model checking
-   [ESBMC](http://www.esbmc.org/) – context-bounded model checking

### SAT & SMT solvers

-   [MiniSat](http://minisat.se/)
-   [PicoSAT](http://fmv.jku.at/picosat)
-   [Z3](https://github.com/Z3Prover/z3)
-   [CVC4](http://cvc4.cs.nyu.edu/web/)
-   [Alt-Ergo](http://alt-ergo.ocamlpro.com/) ([academic page](http://alt-ergo.lri.fr/))
-   [Yices](http://yices.csl.sri.com/) (non-free licence)
-   [MathSAT 5](http://mathsat.fbk.eu/)
-   [Boolector](http://fmv.jku.at/boolector/)
-   [Lingeling, Plingeling and Treengeling](http://fmv.jku.at/lingeling/)
-   [CryptoMiniSat 2](http://www.msoos.org/cryptominisat2/)
-   [SONOLAR](http://www.informatik.uni-bremen.de/agbs/florian/sonolar/) – Solver for Non-Linear Arithmetic
-   [ABC](http://vlsicad.eecs.umich.edu/BK/Slots/cache/www-cad.eecs.berkeley.edu/~alanmi/abc/) – "A System for Sequential Synthesis and Verification"
-   [Vampire](http://vprover.org/index.cgi)
-   [zChaff](https://www.princeton.edu/~chaff/zchaff.html)
-   [funsat](https://hackage.haskell.org/package/funsat) – "a modern DPLL-style SAT
    solver" written in Haskell
-   versat
    -   D\. Oe, A. Stump, C. Oliver, K. Clancy: ["versat: A Verified Modern SAT Solver"](http://homepage.cs.uiowa.edu/~astump/papers/vmcai12.pdf) (2011)
-   ["Simple SMT solver for use in an optimizing compiler"](http://www.well-typed.com/blog/103/)
-   [SAT Competitions](http://www.satcompetition.org/)
-   Configurable SAT Solver Challenge (CSSC) [2014](http://aclib.net/cssc2014/)
-   Model Checking Contest (MCC)

### Other tools

-   [Why3](http://why3.lri.fr/) – platform for deductive reasoning on programs with
    support for many external provers
    -   [Gallery of verified programs](http://toccata.lri.fr/gallery/)
    -   ["Shepherd Your Herd of Provers"](http://research.microsoft.com/en-us/um/people/moskal/boogie2011/boogie2011_pg53.pdf) (2011)
-   [Alloy](http://alloy.mit.edu/alloy/index.html) – "a language and tool for relational models"
-   [Boogie](http://research.microsoft.com/en-us/projects/boogie/) – intermediate verification language
-   [Q Program Verifier](http://research.microsoft.com/en-us/projects/verifierq/)
    – collection of tools for a source–IR–IVL translation and subsequent verification
    -   [SMACK](https://github.com/smackers/smack) – bounded verification via LLVM to
        Boogie translation
-   [Dafny](http://research.microsoft.com/en-us/projects/dafny/) – "a language and
    program verifier for functional correctness"
-   [Vienna Verification Toolkit](http://vvt.forsyte.at/)
-   [CSeq](http://users.ecs.soton.ac.uk/gp4/cseq/cseq.html)
-   [IKOS](http://ti.arc.nasa.gov/opensource/ikos/) – "library designed to facilitate
    the development of sound static analyzers based on Abstract Interpretation"
-   [Crab](https://github.com/seahorn/crab) – "language agnostic engine to perform
    static analysis based on abstract interpretation"
-   [Seahorn](https://seahorn.github.io/) – "fully automated verification framework
    for LLVM-based languages"
-   [rise4fun](http://rise4fun.com/) – a collection of numerous tools, i.a. for
    program and algorithm analysis and verification, by Microsoft Research, CMU and
    others that you can try right on the web page
-   [Profound](http://chaudhuri.info/software/profound/) – "an experiment in
    subformula linking as an interaction method"
    -   K\. Chaudhuri: ["Subformula Linking as an Interaction Method"](http://chaudhuri.info/papers/itp13link.pdf) (2013)
-   [S²E](http://s2e.epfl.ch/) – "A Platform for In-Vivo Analysis of Software Systems"
-   [KLEE](https://klee.github.io/) – symbolic execution VM

### Formal methods in practice

-   [Muen Separation Kernel](http://muen.sk/) – first open-source kernel verified for
    absence of runtime errors ([Reddit discussion](https://www.reddit.com/r/programming/comments/1sjyop/the_muen_separation_kernel_is_the_worlds_first/))
-   [CertiKOS](http://flint.cs.yale.edu/certikos/) – "advanced development of certified OS kernels"
-   [Galois, Inc.](https://galois.com)
-   [Software Systems Research Group](https://ssrg.nicta.com.au) (SSRG) at NICTA – tons of exciting projects
    -   [seL4](http://sel4.systems/) – first fully verified and open-sourced OS kernel
    -   [Cogent](https://ssrg.nicta.com.au/projects/TS/cogent.html) – cogeneration of proofs and C code in Isabelle

### Learning resources

Courses, textbooks, papers, theses, competitions, influential figures in the field.

-   [The QED Manifesto](http://www.cs.ru.nl/~freek/qed/qed.html), some more details
    [here](http://www.rbjones.com/rbjpub/logic/qedres00.htm)
-   [Formalizing 100 Theorems](http://www.cs.ru.nl/~freek/100/index.html)
-   [Verified Software Competition](http://vscomp.org/)
-   [VerifyThis](http://www.verifythis.org/) – a competition and collection of
    problems in formal verification of algorithms and software
-   [Competition on Software Verification](http://sv-comp.sosy-lab.org/) (SV-COMP)
-   [Oregon Programming Languages Summer School](https://www.cs.uoregon.edu/research/summerschool/) –
    video recordings of _awesome_ lectures on type theory, provers, logic, etc.;
    earlier editions only have lecture notes and slides published

    [2016](https://www.cs.uoregon.edu/research/summerschool/summer16/curriculum.php),
    [2015](https://www.cs.uoregon.edu/research/summerschool/summer15/curriculum.html),
    [2014](https://www.cs.uoregon.edu/research/summerschool/summer14/curriculum.html),
    [2013](https://www.cs.uoregon.edu/research/summerschool/summer13/curriculum.html),
    [2012](https://www.cs.uoregon.edu/research/summerschool/summer12/curriculum.html),
    [2011](https://www.cs.uoregon.edu/research/summerschool/summer11/curriculum.html),
    [2010](https://www.cs.uoregon.edu/research/summerschool/summer10/curriculum.html),
    [2009](https://www.cs.uoregon.edu/research/summerschool/summer09/curriculum.html),
    [2008](https://www.cs.uoregon.edu/research/summerschool/summer08/curriculum.html),
    [2007](https://www.cs.uoregon.edu/research/summerschool/summer07/curriculum.html),
    [2006](https://www.cs.uoregon.edu/research/summerschool/summer06/curriculum.html),
    [2005](https://www.cs.uoregon.edu/research/summerschool/summer05/curriculum.html)

-   [Type Theory Study Group 2015](https://github.com/type-theory/type-theory-study-group-2015)

## Type theory

Danny Gratzer's [learn-tt](https://github.com/jozefg/learn-tt) is a fantastic
resource for those interested in type and category theory. He presents all the
terrific tools, textbooks, and papers that deal with both of these in a sensible and
logical way, which is a quality that my repository will never have.

I'll only list here resources which he doesn't mention and which I personally find
interesting.

Check out the [TYPES](http://lists.seas.upenn.edu/mailman/listinfo/types-list)
mailing list as well.

**Dependent types**

-   C\. McBride: [_Epigram: Practical Programming with Dependent Types_](http://cs.ru.nl/~freek/courses/tt-2010/tvftl/epigram-notes.pdf) (2010)
-   A\. Bove, P. Dybjer: [_Dependent Types at Work_](http://www.cse.chalmers.se/~peterd/papers/DependentTypesAtWork.pdf)
    – introduction to programming with dependent types in Agda

**Observational Type Theory**

-   T\. Altenkirch, C. McBride: ["Towards Observational Type Theory"](http://strictlypositive.org/ott.pdf) (2006)
-   F\. Mazzoli: ["Bertus: Implementing Observational Equality"](http://www.doc.ic.ac.uk/teaching/distinguished-projects/2013/f.mazzoli.pdf) (2013)

**Univalent Foundations and Homotopy Type Theory**

-   P\. Aczel: ["On Voevodsky's Univalence Axiom"](http://www.cs.man.ac.uk/~petera/Recent-Slides/Edinburgh-2011-slides_pap.pdf) (2011; slides)

**Cubical Type Theory**

-   M\. Bezen, T. Coquand, S. Huber: ["A model of type theory in cubical sets"](http://www.cse.chalmers.se/~coquand/mod1.pdf) (2014)
-   D\. Licata: ["A Cubical Type Theory"](http://dlicata.web.wesleyan.edu/pubs/lb14cubical/lb14cubes-oxford.pdf) (2014; slides)
-   A\. Kaposi, T. Altenkirch: ["A syntax for cubical type theory"](http://mazzo.li/dump/aim-kaposi-pres.pdf) (2014; slides)
-   T\. Coquand: ["A Cubical Type Theory"](http://www.cse.chalmers.se/~coquand/cork.pdf) (2015; slides)
-   T\. Coquand: ["A cubical type theory"](http://www.cse.chalmers.se/~coquand/stockholm2015.pdf) (2015; slides)
-   C\. Cohen, T. Coquand, S. Huber, A. Mörtberg: ["Cubical Type Theory: a constructive interpretation of the univalence axiom"](http://www.cse.chalmers.se/~coquand/cubicaltt.pdf) (2016)
    -   [mortberg/cubicaltt](https://github.com/mortberg/cubicaltt) – a Haskell implementation of the type theory presented in this paper

## Copyright

Written in 2015–2019 by Matěj Grabovský <matej at mgrabovsky net>

To the extent possible under law, the author has dedicated all copyright and related
and neighboring rights to this software to the public domain worldwide. This software
is distributed without any warranty.

You should have received a copy of the CC0 Public Domain Dedication along with this
software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

<!-- vim: set et ts=4 sw=4: -->
